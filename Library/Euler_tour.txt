#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <functional>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <sstream> //stringstream
#include <cstring> // getline
#include <cmath>
#include <unordered_set>
#include <limits>
#include <unordered_map>

#define _CRT_SECURE_NO_WARNINGS
#define ll 				long long int
#define ld				long double
#define FOR(i, b, e)    for (ll i =(b)-((b)>(e));i!=(e)-((b)>(e));i += 1-2*((b)>(e)))
#define EPS  			1e-9
#define all(v) 			v.begin(),v.end()
#define X 				first 
#define Y 				second
#define IO 				std::ios_base::sync_with_stdio(0);cin.tie(NULL);
#define endl 			'\n'
#define re   			return
#define mp				make_pair
#define NumofDigits(n)  ((int)log10(n)+1)
#define fixedpre(n)     fixed<<setprecision(n);
#define sz size()
#define MAXN 100005
#define MAXM 100005

using namespace std;

string alpha = "abcdefghijklmnopqrstuvwxyz";
const double PI = acos(-1);
const int N = 1e7 + 5;
ll MOD = 1e9 + 7;
ll OO = 1e18 + 8;
int oo = 1e9 + 9;

ll pw(ll b, ll p) { if (!p) re 1; ll sq = pw(b, p / 2); sq *= sq; if (p % 2) sq *= b; re sq; }
ll gcd(ll a, ll b) { re(b == 0 ? a : gcd(b, a % b)); }
ll lcm(ll a, ll b) { re((a * b) / gcd(a, b)); }
ll PowMod(ll bs, ll ex, ll M) { if (!ex)re 1; ll p = PowMod((bs * bs) % M, ex >> 1, M); re(ex & 1) ? (p * bs) % M : p; }
ll ModInverse(ll a) { re PowMod(a, MOD - 2, MOD); }
ll ExtGCD(ll a, ll b, ll& x, ll& y) { if (!b) { x = 1; y = 0; re a; } ll r = ExtGCD(b, a % b, y, x); y -= a / b * x; re r; }
ll mult(ll a, ll b) { re(1LL * a * b) % MOD; }

bool cmp(double a, double b) { re abs(a - b) < EPS; }
bool isint(double a) { re cmp(a, round(a)); }
bool isPrime(ll n) { if (n == 2)re 1; if (n < 2 || n % 2 == 0)re 0; for (ll i = 3; i * i <= n; i += 2)if (n % i == 0)re 0; re 1; }
bool isPalindrome(string str) { ll l = 0; ll h = str.size() - 1; while (h > l) { if (str[l++] != str[h--]) { re 0; } } re 1; }
bool isPerfectSquare(ld x) { ld sr = sqrt(x); re((sr - floor(sr)) == 0); }

double EucildDistance(double x, double y, double xx, double yy) { re sqrt((x - xx) * (x - xx) + (y - yy) * (y - yy)); };

//freopen("input.txt", "r", stdin);
//freopen ("output.txt","w",stdout);

int t, n, ne, head[MAXN], to[MAXN], nxt[MAXN], deg[MAXN], len[MAXM], sorted[MAXM];
char arr[MAXM][21];

void init() {
	memset(head, -1, n * sizeof head[0]);
	memset(deg, 0, n * sizeof deg[0]);
	ne = 0;
}

void addEdge(int u, int v) {
	to[ne] = v;
	nxt[ne] = head[u];
	head[u] = ne++;
}

int res[MAXM], resSZ;
void euler(int u) {
	for (int &e = head[u]; ~e; ) {
		int v = to[e];
		int tmp = e;
		e = nxt[e];
		euler(v);
		res[resSZ++] = tmp;
	}
}

void print(int arr[], int s, string name) {
	for (int i = 0; i < s; i++) {
		cout << name << "[" << i << "] = " << arr[i] << endl;
	}
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("Text.txt", "r", stdin);
	//freopen ("output.txt","w",stdout);
#endif // !ONLINE_JUDGE

	IO;
	cin >> t;
	while (t--) {
		n = 128;
		init();
		int m;
		cin >> m;
		for (int i = 0; i < m; i++) {
			cin >> arr[i];
			len[i] = strlen(arr[i]);
			sorted[i] = i;
		}
		sort(sorted, sorted + m, [](int a, int b) {
			return strcmp(arr[a], arr[b]) < 0;
		});
		while (m--) {
			int i = sorted[m];
			int u, v;
			addEdge(u = arr[i][0], v = arr[i][len[i] - 1]);
			++deg[u];
			--deg[v];
		}
		if (any_of(deg, deg + n, [](int a) {
			re abs(a) > 1;
		}) || count(deg, deg + n, 1) > 1) {
			cout << "***\n";
			continue;
		}
		int st = find(deg, deg + n, 1) - deg;
		if (st == n) {
			st = arr[sorted[0]][0];
		}
		resSZ = 0;
		euler(st);
		if (resSZ != ne) {
			cout << "***\n";
			continue;
		}
		while (resSZ--) {
			int i = res[resSZ];
			i = ne - i - 1;
			i = sorted[i];
			cout << arr[i] << ".\n"[!resSZ];
		}
	}
}